{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      newPostContent: '',\n      posts: [],\n      userId: null // 添加 userId 属性\n    };\n  },\n  created() {\n    this.fetchPosts();\n    // 从本地存储中获取 userId\n    this.userId = localStorage.getItem('userId');\n  },\n  methods: {\n    createPost() {\n      const newPost = {\n        content: this.newPostContent,\n        userId: this.userId,\n        // 将 userId 加入到新帖子的信息中\n        comments: [],\n        newComment: '',\n        // 新增一个属性用于存储每个 post 的新评论内容\n        createdAt: new Date().toISOString()\n      };\n      axios.post('http://localhost:8787/api/posts', newPost).then(response => {\n        this.posts.unshift(response.data);\n        this.newPostContent = '';\n      }).catch(error => {\n        console.error('Error creating post:', error);\n      });\n    },\n    addComment(postId, comments) {\n      const post = this.posts.find(p => p.postId === postId);\n      if (post) {\n        const newComment = {\n          content: post.newComment,\n          userId: this.userId // 将 userId 加入到新评论的信息中\n        };\n        axios.post(`http://localhost:8787/api/posts/${postId}/comments`, newComment).then(response => {\n          comments.push(response.data);\n          post.newComment = ''; // 清空评论输入框\n        }).catch(error => {\n          console.error('Error adding comment:', error);\n        });\n      }\n    },\n    fetchPosts() {\n      axios.get('http://localhost:8787/api/posts').then(response => {\n        this.posts = response.data;\n        // 为每个 post 添加一个新评论的属性\n        this.posts.forEach(post => {\n          post.newComment = '';\n        });\n      }).catch(error => {\n        console.error('Error fetching posts:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","newPostContent","posts","userId","created","fetchPosts","localStorage","getItem","methods","createPost","newPost","content","comments","newComment","createdAt","Date","toISOString","post","then","response","unshift","catch","error","console","addComment","postId","find","p","push","get","forEach"],"sources":["C:\\Users\\USER\\Desktop\\frontend\\src\\components\\SocialMedia.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>Social Media Page</h2>\r\n      <div>\r\n        <h3>Create a Post</h3>\r\n        <form @submit.prevent=\"createPost\">\r\n          <textarea v-model=\"newPostContent\" placeholder=\"What's on your mind?\" required></textarea>\r\n          <button type=\"submit\">Post</button>\r\n        </form>\r\n      </div>\r\n      <div>\r\n        <h3>Posts</h3>\r\n        <div v-for=\"post in posts\" :key=\"post.postId\" class=\"post\">\r\n          <p>{{ post.content }}</p>\r\n          <p>Posted by: {{ post.userName }}</p>\r\n          <!-- 独立的 comment 输入框 -->\r\n          <form @submit.prevent=\"addComment(post.postId, post.comments)\">\r\n            <input type=\"text\" v-model=\"post.newComment\" placeholder=\"Add a comment\" required>\r\n            <button type=\"submit\">Comment</button>\r\n          </form>\r\n          <!-- 显示该 post 的 comments -->\r\n          <div v-for=\"comment in post.comments\" :key=\"comment.commentId\" class=\"comment\">\r\n            <p>{{ comment.content }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        newPostContent: '',\r\n        posts: [],\r\n        userId: null // 添加 userId 属性\r\n      };\r\n    },\r\n    created() {\r\n      this.fetchPosts();\r\n      // 从本地存储中获取 userId\r\n      this.userId = localStorage.getItem('userId');\r\n    },\r\n    methods: {\r\n      createPost() {\r\n        const newPost = {\r\n          content: this.newPostContent,\r\n          userId: this.userId, // 将 userId 加入到新帖子的信息中\r\n          comments: [],\r\n          newComment: '', // 新增一个属性用于存储每个 post 的新评论内容\r\n          createdAt: new Date().toISOString()\r\n        };\r\n        axios.post('http://localhost:8787/api/posts', newPost)\r\n          .then(response => {\r\n            this.posts.unshift(response.data);\r\n            this.newPostContent = '';\r\n          })\r\n          .catch(error => {\r\n            console.error('Error creating post:', error);\r\n          });\r\n      },\r\n      addComment(postId, comments) {\r\n        const post = this.posts.find(p => p.postId === postId);\r\n        if (post) {\r\n          const newComment = {\r\n            content: post.newComment,\r\n            userId: this.userId // 将 userId 加入到新评论的信息中\r\n          };\r\n          axios.post(`http://localhost:8787/api/posts/${postId}/comments`, newComment)\r\n            .then(response => {\r\n              comments.push(response.data);\r\n              post.newComment = ''; // 清空评论输入框\r\n            })\r\n            .catch(error => {\r\n              console.error('Error adding comment:', error);\r\n            });\r\n        }\r\n      },\r\n      fetchPosts() {\r\n        axios.get('http://localhost:8787/api/posts')\r\n          .then(response => {\r\n            this.posts = response.data;\r\n            // 为每个 post 添加一个新评论的属性\r\n            this.posts.forEach(post => {\r\n              post.newComment = '';\r\n            });\r\n          })\r\n          .catch(error => {\r\n            console.error('Error fetching posts:', error);\r\n          });\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .post {\r\n    border: 1px solid #ccc;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n  }\r\n  .comment {\r\n    margin-left: 20px;\r\n    border-top: 1px solid #eee;\r\n    padding-top: 5px;\r\n  }\r\n  </style>\r\n  "],"mappings":";AA8BE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,cAAc,EAAE,EAAE;MAClBC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,IAAG,CAAE;IACf,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,UAAU,CAAC,CAAC;IACjB;IACA,IAAI,CAACF,MAAK,GAAIG,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAC9C,CAAC;EACDC,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX,MAAMC,OAAM,GAAI;QACdC,OAAO,EAAE,IAAI,CAACV,cAAc;QAC5BE,MAAM,EAAE,IAAI,CAACA,MAAM;QAAE;QACrBS,QAAQ,EAAE,EAAE;QACZC,UAAU,EAAE,EAAE;QAAE;QAChBC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;MACDjB,KAAK,CAACkB,IAAI,CAAC,iCAAiC,EAAEP,OAAO,EAClDQ,IAAI,CAACC,QAAO,IAAK;QAChB,IAAI,CAACjB,KAAK,CAACkB,OAAO,CAACD,QAAQ,CAACnB,IAAI,CAAC;QACjC,IAAI,CAACC,cAAa,GAAI,EAAE;MAC1B,CAAC,EACAoB,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C,CAAC,CAAC;IACN,CAAC;IACDE,UAAUA,CAACC,MAAM,EAAEb,QAAQ,EAAE;MAC3B,MAAMK,IAAG,GAAI,IAAI,CAACf,KAAK,CAACwB,IAAI,CAACC,CAAA,IAAKA,CAAC,CAACF,MAAK,KAAMA,MAAM,CAAC;MACtD,IAAIR,IAAI,EAAE;QACR,MAAMJ,UAAS,GAAI;UACjBF,OAAO,EAAEM,IAAI,CAACJ,UAAU;UACxBV,MAAM,EAAE,IAAI,CAACA,MAAK,CAAE;QACtB,CAAC;QACDJ,KAAK,CAACkB,IAAI,CAAE,mCAAkCQ,MAAO,WAAU,EAAEZ,UAAU,EACxEK,IAAI,CAACC,QAAO,IAAK;UAChBP,QAAQ,CAACgB,IAAI,CAACT,QAAQ,CAACnB,IAAI,CAAC;UAC5BiB,IAAI,CAACJ,UAAS,GAAI,EAAE,EAAE;QACxB,CAAC,EACAQ,KAAK,CAACC,KAAI,IAAK;UACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC/C,CAAC,CAAC;MACN;IACF,CAAC;IACDjB,UAAUA,CAAA,EAAG;MACXN,KAAK,CAAC8B,GAAG,CAAC,iCAAiC,EACxCX,IAAI,CAACC,QAAO,IAAK;QAChB,IAAI,CAACjB,KAAI,GAAIiB,QAAQ,CAACnB,IAAI;QAC1B;QACA,IAAI,CAACE,KAAK,CAAC4B,OAAO,CAACb,IAAG,IAAK;UACzBA,IAAI,CAACJ,UAAS,GAAI,EAAE;QACtB,CAAC,CAAC;MACJ,CAAC,EACAQ,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C,CAAC,CAAC;IACN;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}