{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      newPostContent: '',\n      posts: [],\n      userId: null,\n      newCommentContent: ''\n    };\n  },\n  created() {\n    this.fetchPosts();\n    // 从本地存储中获取 userId\n    this.userId = localStorage.getItem('userId');\n  },\n  methods: {\n    createPost() {\n      const newPost = {\n        content: this.newPostContent,\n        userId: this.$route.query.userId,\n        // 将 userId 加入到新帖子的信息中\n        // userName: this.userName,\n        comments: [],\n        newComment: '',\n        // 新增一个属性用于存储每个 post 的新评论内容\n        //yyyy-mm-dd hh:mm:ss\n        createdAt: new Date().toISOString().slice(0, 19).replace('T', ' ')\n      };\n      axios.post('http://localhost:8787/api/posts', newPost).then(() => {\n        this.fetchPosts(); // 提交帖子后重新获取帖子列表\n        this.newPostContent = '';\n      }).catch(error => {\n        console.error('Error creating post:', error);\n      });\n    },\n    addComment(postId) {\n      if (postId && this.newCommentContent) {\n        const newComment = {\n          content: this.newCommentContent,\n          userId: this.$route.query.userId,\n          // 将 userId 加入到新评论的信息中\n          createdAt: new Date().toISOString().slice(0, 19).replace('T', ' '),\n          postId: postId\n        };\n        axios.post(`http://localhost:8787/api/posts/${postId}/comments`, newComment).then(() => {\n          this.newCommentContent = ''; // 清空评论输入框\n        }).catch(error => {\n          console.error('Error adding comment:', error);\n        });\n      }\n    },\n    fetchCommetns() {},\n    fetchPosts() {\n      axios.get('http://localhost:8787/api/posts').then(response => {\n        this.posts = response.data.reverse(); // 反转顺序\n        // 为每个 post 添加一个新评论的属性\n        this.posts.forEach(post => {\n          post.newComment = '';\n        });\n      }).catch(error => {\n        console.error('Error fetching posts:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","newPostContent","posts","userId","newCommentContent","created","fetchPosts","localStorage","getItem","methods","createPost","newPost","content","$route","query","comments","newComment","createdAt","Date","toISOString","slice","replace","post","then","catch","error","console","addComment","postId","fetchCommetns","get","response","reverse","forEach"],"sources":["C:\\Users\\USER\\Desktop\\frontend\\src\\components\\SocialMedia.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>Social Media Page</h2>\r\n    <div>\r\n      <h3>Create a Post</h3>\r\n      <form @submit.prevent=\"createPost\">\r\n        <textarea v-model=\"newPostContent\" placeholder=\"What's on your mind?\" required></textarea>\r\n        <button type=\"submit\">Post</button>\r\n      </form>\r\n    </div>\r\n    <div>\r\n      <h3>Posts</h3>\r\n      <div v-for=\"post in posts\" :key=\"post.postId\" class=\"post\">\r\n        <p>{{ post.content }}</p>\r\n        <p>Posted by: {{ post.userName }}</p>\r\n        <p>Posted at: {{ post.createdAt }}</p>\r\n        <!-- 独立的 comment 输入框 -->\r\n        <form @submit.prevent=\"addComment(post.postId, post.comments)\">\r\n          <input type=\"text\" v-model=\"newCommentContent\" placeholder=\"Add a comment\" required>\r\n          <button type=\"submit\">Comment</button>\r\n        </form>\r\n        <!-- 显示该 post 的 comments -->\r\n        <div v-for=\"comment in post.comments\" :key=\"comment.commentId\" class=\"comment\">\r\n          <p>{{ comment.content }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      newPostContent: '',\r\n      posts: [],\r\n      userId: null,\r\n      newCommentContent: ''\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchPosts();\r\n    // 从本地存储中获取 userId\r\n    this.userId = localStorage.getItem('userId');\r\n  },\r\n  methods: {\r\n    createPost() {\r\n      const newPost = {\r\n        content: this.newPostContent,\r\n        userId: this.$route.query.userId, // 将 userId 加入到新帖子的信息中\r\n        // userName: this.userName,\r\n        comments: [],\r\n        newComment: '', // 新增一个属性用于存储每个 post 的新评论内容\r\n        //yyyy-mm-dd hh:mm:ss\r\n        createdAt : new Date().toISOString().slice(0, 19).replace('T', ' ')\r\n      };\r\n      axios.post('http://localhost:8787/api/posts', newPost)\r\n        .then(() => {\r\n          this.fetchPosts(); // 提交帖子后重新获取帖子列表\r\n          this.newPostContent = '';\r\n        })\r\n        .catch(error => {\r\n          console.error('Error creating post:', error);\r\n        });\r\n    },\r\n    addComment(postId) {\r\n      if (postId && this.newCommentContent) {\r\n        const newComment = {\r\n          content: this.newCommentContent,\r\n          userId: this.$route.query.userId, // 将 userId 加入到新评论的信息中\r\n          createdAt: new Date().toISOString().slice(0, 19).replace('T', ' '),\r\n          postId: postId\r\n        };\r\n        axios.post(`http://localhost:8787/api/posts/${postId}/comments`, newComment)\r\n          .then(() => {\r\n            this.newCommentContent = ''; // 清空评论输入框\r\n          })\r\n          .catch(error => {\r\n            console.error('Error adding comment:', error);\r\n          });\r\n      }\r\n    },\r\n    fetchCommetns(){\r\n      \r\n    },\r\n    fetchPosts() {\r\n      axios.get('http://localhost:8787/api/posts')\r\n        .then(response => {\r\n          this.posts = response.data.reverse(); // 反转顺序\r\n          // 为每个 post 添加一个新评论的属性\r\n          this.posts.forEach(post => {\r\n            post.newComment = '';\r\n          });\r\n        })\r\n        .catch(error => {\r\n          console.error('Error fetching posts:', error);\r\n        });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.post {\r\n  border: 1px solid #ccc;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n.comment {\r\n  margin-left: 20px;\r\n  border-top: 1px solid #eee;\r\n  padding-top: 5px;\r\n}\r\n</style>\r\n"],"mappings":"AA+BA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,cAAc,EAAE,EAAE;MAClBC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,IAAI;MACZC,iBAAiB,EAAE;IACrB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,UAAU,CAAC,CAAC;IACjB;IACA,IAAI,CAACH,MAAK,GAAII,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAC9C,CAAC;EACDC,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX,MAAMC,OAAM,GAAI;QACdC,OAAO,EAAE,IAAI,CAACX,cAAc;QAC5BE,MAAM,EAAE,IAAI,CAACU,MAAM,CAACC,KAAK,CAACX,MAAM;QAAE;QAClC;QACAY,QAAQ,EAAE,EAAE;QACZC,UAAU,EAAE,EAAE;QAAE;QAChB;QACAC,SAAQ,EAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,OAAO,CAAC,GAAG,EAAE,GAAG;MACpE,CAAC;MACDtB,KAAK,CAACuB,IAAI,CAAC,iCAAiC,EAAEX,OAAO,EAClDY,IAAI,CAAC,MAAM;QACV,IAAI,CAACjB,UAAU,CAAC,CAAC,EAAE;QACnB,IAAI,CAACL,cAAa,GAAI,EAAE;MAC1B,CAAC,EACAuB,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C,CAAC,CAAC;IACN,CAAC;IACDE,UAAUA,CAACC,MAAM,EAAE;MACjB,IAAIA,MAAK,IAAK,IAAI,CAACxB,iBAAiB,EAAE;QACpC,MAAMY,UAAS,GAAI;UACjBJ,OAAO,EAAE,IAAI,CAACR,iBAAiB;UAC/BD,MAAM,EAAE,IAAI,CAACU,MAAM,CAACC,KAAK,CAACX,MAAM;UAAE;UAClCc,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;UAClEO,MAAM,EAAEA;QACV,CAAC;QACD7B,KAAK,CAACuB,IAAI,CAAE,mCAAkCM,MAAO,WAAU,EAAEZ,UAAU,EACxEO,IAAI,CAAC,MAAM;UACV,IAAI,CAACnB,iBAAgB,GAAI,EAAE,EAAE;QAC/B,CAAC,EACAoB,KAAK,CAACC,KAAI,IAAK;UACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC/C,CAAC,CAAC;MACN;IACF,CAAC;IACDI,aAAaA,CAAA,EAAE,CAEf,CAAC;IACDvB,UAAUA,CAAA,EAAG;MACXP,KAAK,CAAC+B,GAAG,CAAC,iCAAiC,EACxCP,IAAI,CAACQ,QAAO,IAAK;QAChB,IAAI,CAAC7B,KAAI,GAAI6B,QAAQ,CAAC/B,IAAI,CAACgC,OAAO,CAAC,CAAC,EAAE;QACtC;QACA,IAAI,CAAC9B,KAAK,CAAC+B,OAAO,CAACX,IAAG,IAAK;UACzBA,IAAI,CAACN,UAAS,GAAI,EAAE;QACtB,CAAC,CAAC;MACJ,CAAC,EACAQ,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C,CAAC,CAAC;IACN;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}