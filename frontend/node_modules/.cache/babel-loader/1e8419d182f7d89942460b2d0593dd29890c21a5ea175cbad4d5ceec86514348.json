{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-142d2ef7\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"社媒頁面\", -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"建立貼文：\", -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\",\n  class: \"postButton\"\n}, \"發文\", -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"所有貼文\", -1 /* HOISTED */));\nconst _hoisted_5 = [\"onSubmit\"];\nconst _hoisted_6 = [\"onUpdate:modelValue\"];\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\",\n  class: \"commentButton\"\n}, \"新增留言\", -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"div\", null, [_hoisted_2, _createElementVNode(\"form\", {\n    onSubmit: _cache[1] || (_cache[1] = _withModifiers((...args) => $options.createPost && $options.createPost(...args), [\"prevent\"]))\n  }, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newPostContent = $event),\n    placeholder: \"你在想什麼?\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newPostContent]]), _hoisted_3], 32 /* NEED_HYDRATION */)]), _createElementVNode(\"div\", null, [_hoisted_4, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.posts, post => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: post.postId,\n      class: \"post\"\n    }, [_createElementVNode(\"p\", null, _toDisplayString(post.content), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(post.userName) + \" 建立於: \" + _toDisplayString(post.createdAt), 1 /* TEXT */), _createCommentVNode(\" <button v-if=\\\"post.userId == userId\\\" @click=\\\"deletePost(post.postId)\\\" class=\\\"deleteButton\\\">刪除貼文</button> \"), _createCommentVNode(\" 獨立的 comment 输入框 \"), _createElementVNode(\"form\", {\n      onSubmit: _withModifiers($event => $options.addComment(post), [\"prevent\"])\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      \"onUpdate:modelValue\": $event => post.newCommentContent = $event,\n      placeholder: \"輸入留言\",\n      required: \"\"\n    }, null, 8 /* PROPS */, _hoisted_6), [[_vModelText, post.newCommentContent]]), _hoisted_7], 40 /* PROPS, NEED_HYDRATION */, _hoisted_5), _createCommentVNode(\" 顯示该 post 的 comments \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(post.comments, comment => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: comment.commentId,\n        class: \"comment\"\n      }, [_createElementVNode(\"p\", null, _toDisplayString(comment.content), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(comment.userName) + \"回覆於: \" + _toDisplayString(comment.createdAt), 1 /* TEXT */), _createCommentVNode(\" <button v-if=\\\"comment.userId == userId\\\" @click=\\\"deleteComment(post.postId, comment.commentId)\\\" class=\\\"deleteButton\\\">刪除留言</button> \")]);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","type","class","_createElementBlock","_hoisted_1","_hoisted_2","onSubmit","_cache","_withModifiers","args","$options","createPost","$event","$data","newPostContent","placeholder","required","_hoisted_3","_hoisted_4","_Fragment","_renderList","posts","post","key","postId","_toDisplayString","content","userName","createdAt","_createCommentVNode","addComment","newCommentContent","_hoisted_6","_hoisted_7","_hoisted_5","comments","comment","commentId"],"sources":["/Users/alan/Desktop/social-platform/frontend/src/components/SocialMedia.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>社媒頁面</h1>\n    <div>\n      <h2>建立貼文：</h2>\n      <form @submit.prevent=\"createPost\">\n        <textarea v-model=\"newPostContent\" placeholder=\"你在想什麼?\" required></textarea>\n        <button type=\"submit\" class=\"postButton\">發文</button>\n      </form>\n    </div>\n\n    <div>\n      <h2>所有貼文</h2>\n      <div v-for=\"post in posts\" :key=\"post.postId\" class=\"post\">\n        <p>{{ post.content }}</p>\n        <p>{{ post.userName }} 建立於: {{ post.createdAt }}</p>\n        <!-- <button v-if=\"post.userId == userId\" @click=\"deletePost(post.postId)\" class=\"deleteButton\">刪除貼文</button> -->\n        <!-- 獨立的 comment 输入框 -->\n        <form @submit.prevent=\"addComment(post)\">\n          <input type=\"text\" v-model=\"post.newCommentContent\" placeholder=\"輸入留言\" required>\n          <button type=\"submit\" class=\"commentButton\">新增留言</button>\n        </form>\n        <!-- 顯示该 post 的 comments -->\n        <div v-for=\"comment in post.comments\" :key=\"comment.commentId\" class=\"comment\">\n          <p>{{ comment.content }}</p>\n          <p>{{ comment.userName }}回覆於: {{ comment.createdAt }}</p>\n          <!-- <button v-if=\"comment.userId == userId\" @click=\"deleteComment(post.postId, comment.commentId)\" class=\"deleteButton\">刪除留言</button> -->\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      newPostContent: '',\n      posts: [],\n      userId: null,\n    };\n  },\n  created() {\n    this.fetchPosts();\n    // 从本地存储中获取 userId\n    this.userId = this.$route.query.userId;\n  },\n  methods: {\n    createPost() {\n      const newPost = {\n        content: this.newPostContent,\n        userId: this.userId, // 使用当前用户的 userId\n        comments: [],\n        createdAt: new Date().toISOString().slice(0, 19).replace('T', ' ')\n      };\n      axios.post('http://localhost:8787/api/posts', newPost)\n        .then(() => {\n          this.fetchPosts(); // 提交帖子后重新获取帖子列表\n          this.newPostContent = '';\n        })\n        .catch(error => {\n          console.error('Error creating post:', error);\n        });\n    },\n    addComment(post) {\n        const newComment = {\n          content: post.newCommentContent,\n          userId: this.userId, // 使用当前用户的 userId\n          createdAt: new Date().toISOString().slice(0, 19).replace('T', ' '),\n          postId: post.postId\n        };\n        axios.post(`http://localhost:8787/api/posts/${post.postId}/comments`, newComment)\n          .then(() => {\n            this.fetchPosts(); // 提交评论后重新获取帖子列表\n            post.newCommentContent = ''; // 清空评论输入框\n          })\n          .catch(error => {\n            console.error('Error adding comment:', error);\n          });\n    },\n    deletePost(postId) {\n      axios.delete(`http://localhost:8787/api/posts/${postId}`)\n        .then(() => {\n          this.fetchPosts(); // 刪除帖子后重新获取帖子列表\n        })\n        .catch(error => {\n          console.error('Error deleting post:', error);\n        });\n    },\n    deleteComment(postId, commentId) {\n      axios.delete(`http://localhost:8787/api/posts/${postId}/comments/${commentId}`)\n        .then(() => {\n          this.fetchPosts(); // 刪除评论后重新获取帖子列表\n        })\n        .catch(error => {\n          console.error('Error deleting comment:', error);\n        });\n    },\n    fetchPosts() {\n      axios.get('http://localhost:8787/api/posts')\n        .then(response => {\n          this.posts = response.data.reverse(); // 反转顺序\n          // 为每个 post 添加一个新评论的属性\n          this.posts.forEach(post => {\n            post.newCommentContent = ''; // 为每个帖子添加评论输入框内容属性\n          });\n        })\n        .catch(error => {\n          console.error('Error fetching posts:', error);\n        });\n    }\n  }\n};\n</script>\n\n\n<style scoped>\n/* Post 的樣式 */\n.post {\n  border: 1px solid #ccc;\n  border-radius: 10px;\n  padding: 20px;\n  margin-bottom: 15px;\n  background-color: #f9f9f9;\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\n}\n\n/* Post 的文字樣式 */\n.post p {\n  margin: 0;\n  padding: 5px 0;\n  color: #333;\n}\n\n/* Comment 的樣式 */\n.comment {\n  margin-left: 20px;\n  border-top: 1px solid #ddd;\n  padding-top: 10px;\n  margin-top: 10px;\n  padding-left: 10px;\n  background-color: #f2f2f2;\n  border-left: 3px solid #007bff;\n}\n\n/* Comment 的文字樣式 */\n.comment p {\n  margin: 0;\n  padding: 3px 0;\n  color: #555;\n}\n\n/* 表單的樣式 */\nform {\n  margin-top: 10px;\n}\n\n.postButton {\n  background-color: #2ba33d;\n  color: white;\n  border: none;\n  padding: 8px 15px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.commentButton {\n  background-color: #007bff;\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.postButton:hover {\n  background-color: #2a923d;\n}\n\n.commentButton:hover {\n  background-color: #0056b3;\n}\n\n/* 文本域和輸入框的樣式 */\ntextarea, input[type=\"text\"] {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  margin-top: 5px;\n  box-sizing: border-box;\n}\n</style>\n"],"mappings":";;gEAEIA,mBAAA,CAAa,YAAT,MAAI;gEAENA,mBAAA,CAAc,YAAV,OAAK;gEAGPA,mBAAA,CAAoD;EAA5CC,IAAI,EAAC,QAAQ;EAACC,KAAK,EAAC;GAAa,IAAE;gEAK7CF,mBAAA,CAAa,YAAT,MAAI;mBAZd;mBAAA;gEAoBUA,mBAAA,CAAyD;EAAjDC,IAAI,EAAC,QAAQ;EAACC,KAAK,EAAC;GAAgB,MAAI;;uBAnBxDC,mBAAA,CA6BM,cA5BJC,UAAa,EACbJ,mBAAA,CAMM,cALJK,UAAc,EACdL,mBAAA,CAGO;IAHAM,QAAM,EAAAC,MAAA,QAAAA,MAAA,MALnBC,cAAA,KAAAC,IAAA,KAK6BC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;sBAC/BT,mBAAA,CAA4E;IANpF,uBAAAO,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAM2BC,KAAA,CAAAC,cAAc,GAAAF,MAAA;IAAEG,WAAW,EAAC,QAAQ;IAACC,QAAQ,EAAR;iDAArCH,KAAA,CAAAC,cAAc,E,GACjCG,UAAoD,C,8BAIxDjB,mBAAA,CAkBM,cAjBJkB,UAAa,G,kBACbf,mBAAA,CAeMgB,SAAA,QA5BZC,WAAA,CAa0BP,KAAA,CAAAQ,KAAK,EAAbC,IAAI;yBAAhBnB,mBAAA,CAeM;MAfsBoB,GAAG,EAAED,IAAI,CAACE,MAAM;MAAEtB,KAAK,EAAC;QAClDF,mBAAA,CAAyB,WAAAyB,gBAAA,CAAnBH,IAAI,CAACI,OAAO,kBAClB1B,mBAAA,CAAoD,WAAAyB,gBAAA,CAA9CH,IAAI,CAACK,QAAQ,IAAG,QAAM,GAAAF,gBAAA,CAAGH,IAAI,CAACM,SAAS,kBAC7CC,mBAAA,oHAAiH,EACjHA,mBAAA,qBAAwB,EACxB7B,mBAAA,CAGO;MAHAM,QAAM,EAlBrBE,cAAA,CAAAI,MAAA,IAkB+BF,QAAA,CAAAoB,UAAU,CAACR,IAAI;wBACpCtB,mBAAA,CAAgF;MAAzEC,IAAI,EAAC,MAAM;MAnB5B,uBAAAW,MAAA,IAmBsCU,IAAI,CAACS,iBAAiB,GAAAnB,MAAA;MAAEG,WAAW,EAAC,MAAM;MAACC,QAAQ,EAAR;4BAnBjFgB,UAAA,I,cAmBsCV,IAAI,CAACS,iBAAiB,E,GAClDE,UAAyD,C,kCApBnEC,UAAA,GAsBQL,mBAAA,yBAA4B,G,kBAC5B1B,mBAAA,CAIMgB,SAAA,QA3BdC,WAAA,CAuB+BE,IAAI,CAACa,QAAQ,EAAxBC,OAAO;2BAAnBjC,mBAAA,CAIM;QAJiCoB,GAAG,EAAEa,OAAO,CAACC,SAAS;QAAEnC,KAAK,EAAC;UACnEF,mBAAA,CAA4B,WAAAyB,gBAAA,CAAtBW,OAAO,CAACV,OAAO,kBACrB1B,mBAAA,CAAyD,WAAAyB,gBAAA,CAAnDW,OAAO,CAACT,QAAQ,IAAG,OAAK,GAAAF,gBAAA,CAAGW,OAAO,CAACR,SAAS,kBAClDC,mBAAA,6IAA0I,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}