{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      newPostContent: '',\n      posts: [],\n      userId: null\n    };\n  },\n  created() {\n    this.fetchPosts();\n    // 从本地存储中获取 userId\n    this.userId = this.$route.query.userId;\n  },\n  methods: {\n    createPost() {\n      const newPost = {\n        content: this.newPostContent,\n        userId: this.userId,\n        // 使用当前用户的 userId\n        comments: [],\n        createdAt: new Date().toISOString().slice(0, 19).replace('T', ' ')\n      };\n      axios.post('http://localhost:8787/api/posts', newPost).then(() => {\n        this.fetchPosts(); // 提交帖子后重新获取帖子列表\n        this.newPostContent = '';\n      }).catch(error => {\n        console.error('Error creating post:', error);\n      });\n    },\n    addComment(post) {\n      const newComment = {\n        content: post.newCommentContent,\n        userId: this.userId,\n        // 使用当前用户的 userId\n        createdAt: new Date().toISOString().slice(0, 19).replace('T', ' '),\n        postId: post.postId\n      };\n      axios.post(`http://localhost:8787/api/posts/${post.postId}/comments`, newComment).then(() => {\n        this.fetchPosts(); // 提交评论后重新获取帖子列表\n        post.newCommentContent = ''; // 清空评论输入框\n      }).catch(error => {\n        console.error('Error adding comment:', error);\n      });\n    },\n    deletePost(postId) {\n      axios.delete(`http://localhost:8787/api/posts/${postId}`).then(() => {\n        this.fetchPosts(); // 刪除帖子后重新获取帖子列表\n      }).catch(error => {\n        console.error('Error deleting post:', error);\n      });\n    },\n    deleteComment(postId, commentId) {\n      axios.delete(`http://localhost:8787/api/posts/${postId}/comments/${commentId}`).then(() => {\n        this.fetchPosts(); // 刪除评论后重新获取帖子列表\n      }).catch(error => {\n        console.error('Error deleting comment:', error);\n      });\n    },\n    fetchPosts() {\n      axios.get('http://localhost:8787/api/posts').then(response => {\n        this.posts = response.data.reverse(); // 反转顺序\n        // 为每个 post 添加一个新评论的属性\n        this.posts.forEach(post => {\n          post.newCommentContent = ''; // 为每个帖子添加评论输入框内容属性\n        });\n      }).catch(error => {\n        console.error('Error fetching posts:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","newPostContent","posts","userId","created","fetchPosts","$route","query","methods","createPost","newPost","content","comments","createdAt","Date","toISOString","slice","replace","post","then","catch","error","console","addComment","newComment","newCommentContent","postId","deletePost","delete","deleteComment","commentId","get","response","reverse","forEach"],"sources":["/Users/alan/Desktop/social-platform/frontend/src/components/SocialMedia.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>社媒頁面</h1>\n    <div>\n      <h2>建立貼文：</h2>\n      <form @submit.prevent=\"createPost\">\n        <textarea v-model=\"newPostContent\" placeholder=\"你在想什麼?\" required></textarea>\n        <button type=\"submit\" class=\"postButton\">發文</button>\n      </form>\n    </div>\n\n    <div>\n      <h2>所有貼文</h2>\n      <div v-for=\"post in posts\" :key=\"post.postId\" class=\"post\">\n        <p>{{ post.content }}</p>\n        <p><strong>{{ post.userName }}</strong> 建立於: {{ post.createdAt }}</p>\n        <button v-if=\"post.userId == userId\" @click=\"deletePost(post.postId)\" class=\"deleteButton\">刪除貼文</button>\n        <form @submit.prevent=\"addComment(post)\">\n          <input type=\"text\" v-model=\"post.newCommentContent\" placeholder=\"輸入留言\" required>\n          <button type=\"submit\" class=\"commentButton\">新增留言</button>\n        </form>\n        <div v-for=\"comment in post.comments\" :key=\"comment.commentId\" class=\"comment\">\n          <p>{{ comment.content }}</p>\n          <p><strong>{{ comment.userName }}</strong> 回覆於: {{ comment.createdAt }}</p>\n          <button v-if=\"comment.userId == userId\" @click=\"deleteComment(post.postId, comment.commentId)\" class=\"deleteButton\">刪除留言</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      newPostContent: '',\n      posts: [],\n      userId: null,\n    };\n  },\n  created() {\n    this.fetchPosts();\n    // 从本地存储中获取 userId\n    this.userId = this.$route.query.userId;\n  },\n  methods: {\n    createPost() {\n      const newPost = {\n        content: this.newPostContent,\n        userId: this.userId, // 使用当前用户的 userId\n        comments: [],\n        createdAt: new Date().toISOString().slice(0, 19).replace('T', ' ')\n      };\n      axios.post('http://localhost:8787/api/posts', newPost)\n        .then(() => {\n          this.fetchPosts(); // 提交帖子后重新获取帖子列表\n          this.newPostContent = '';\n        })\n        .catch(error => {\n          console.error('Error creating post:', error);\n        });\n    },\n    addComment(post) {\n        const newComment = {\n          content: post.newCommentContent,\n          userId: this.userId, // 使用当前用户的 userId\n          createdAt: new Date().toISOString().slice(0, 19).replace('T', ' '),\n          postId: post.postId\n        };\n        axios.post(`http://localhost:8787/api/posts/${post.postId}/comments`, newComment)\n          .then(() => {\n            this.fetchPosts(); // 提交评论后重新获取帖子列表\n            post.newCommentContent = ''; // 清空评论输入框\n          })\n          .catch(error => {\n            console.error('Error adding comment:', error);\n          });\n    },\n    deletePost(postId) {\n      axios.delete(`http://localhost:8787/api/posts/${postId}`)\n        .then(() => {\n          this.fetchPosts(); // 刪除帖子后重新获取帖子列表\n        })\n        .catch(error => {\n          console.error('Error deleting post:', error);\n        });\n    },\n    deleteComment(postId, commentId) {\n      axios.delete(`http://localhost:8787/api/posts/${postId}/comments/${commentId}`)\n        .then(() => {\n          this.fetchPosts(); // 刪除评论后重新获取帖子列表\n        })\n        .catch(error => {\n          console.error('Error deleting comment:', error);\n        });\n    },\n    fetchPosts() {\n      axios.get('http://localhost:8787/api/posts')\n        .then(response => {\n          this.posts = response.data.reverse(); // 反转顺序\n          // 为每个 post 添加一个新评论的属性\n          this.posts.forEach(post => {\n            post.newCommentContent = ''; // 为每个帖子添加评论输入框内容属性\n          });\n        })\n        .catch(error => {\n          console.error('Error fetching posts:', error);\n        });\n    }\n  }\n};\n</script>\n\n\n<style scoped>\n/* Post 的樣式 */\n.post {\n  border: 1px solid #ccc;\n  border-radius: 10px;\n  padding: 20px;\n  margin-bottom: 15px;\n  background-color: #f9f9f9;\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\n}\n\n/* Post 的文字樣式 */\n.post p {\n  margin: 0;\n  padding: 5px 0;\n  color: #333;\n}\n\n/* Comment 的樣式 */\n.comment {\n  margin-left: 20px;\n  border-top: 1px solid #ddd;\n  padding-top: 10px;\n  margin-top: 10px;\n  padding-left: 10px;\n  background-color: #f2f2f2;\n  border-left: 3px solid #007bff;\n}\n\n/* Comment 的文字樣式 */\n.comment p {\n  margin: 0;\n  padding: 3px 0;\n  color: #555;\n}\n\n/* 表單的樣式 */\nform {\n  margin-top: 10px;\n}\n\n.postButton {\n  background-color: #2ba33d;\n  color: white;\n  border: none;\n  padding: 8px 15px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.commentButton {\n  background-color: #007bff;\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.deleteButton {\n  background-color: #dc3545;\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.postButton:hover {\n  background-color: #2a923d;\n}\n\n.commentButton:hover {\n  background-color: #0056b3;\n}\n\n.deleteButton:hover {\n  background-color: #c82333;\n}\n\n/* 文本域和輸入框的樣式 */\ntextarea, input[type=\"text\"] {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  margin-top: 5px;\n  box-sizing: border-box;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}