{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-142d2ef7\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Social Media Page\", -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"Create a Post\", -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Post\", -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"Posts\", -1 /* HOISTED */));\nconst _hoisted_5 = [\"onSubmit\"];\nconst _hoisted_6 = [\"onUpdate:modelValue\"];\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Comment\", -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"div\", null, [_hoisted_2, _createElementVNode(\"form\", {\n    onSubmit: _cache[1] || (_cache[1] = _withModifiers((...args) => $options.createPost && $options.createPost(...args), [\"prevent\"]))\n  }, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newPostContent = $event),\n    placeholder: \"What's on your mind?\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newPostContent]]), _hoisted_3], 32 /* NEED_HYDRATION */)]), _createElementVNode(\"div\", null, [_hoisted_4, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.posts, post => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: post.postId,\n      class: \"post\"\n    }, [_createElementVNode(\"p\", null, _toDisplayString(post.content), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Posted by: \" + _toDisplayString(post.userName), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Posted at: \" + _toDisplayString(post.createdAt), 1 /* TEXT */), _createCommentVNode(\" 独立的 comment 输入框 \"), _createElementVNode(\"form\", {\n      onSubmit: _withModifiers($event => $options.addComment(post.postId, post.comments, this.$route.query.userId), [\"prevent\"])\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      \"onUpdate:modelValue\": $event => post.newComment = $event,\n      placeholder: \"Add a comment\",\n      required: \"\"\n    }, null, 8 /* PROPS */, _hoisted_6), [[_vModelText, post.newComment]]), _hoisted_7], 40 /* PROPS, NEED_HYDRATION */, _hoisted_5), _createCommentVNode(\" 显示该 post 的 comments \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(post.comments, comment => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: comment.commentId,\n        class: \"comment\"\n      }, [_createElementVNode(\"p\", null, _toDisplayString(comment.content), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Commented by: \" + _toDisplayString(comment.ID), 1 /* TEXT */)]);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","type","_createElementBlock","_hoisted_1","_hoisted_2","onSubmit","_cache","_withModifiers","args","$options","createPost","$event","$data","newPostContent","placeholder","required","_hoisted_3","_hoisted_4","_Fragment","_renderList","posts","post","key","postId","class","_toDisplayString","content","userName","createdAt","_createCommentVNode","addComment","comments","$route","query","userId","newComment","_hoisted_6","_hoisted_7","_hoisted_5","comment","commentId","ID"],"sources":["C:\\Users\\USER\\Desktop\\frontend\\src\\components\\SocialMedia.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>Social Media Page</h2>\r\n      <div>\r\n        <h3>Create a Post</h3>\r\n        <form @submit.prevent=\"createPost\">\r\n          <textarea v-model=\"newPostContent\" placeholder=\"What's on your mind?\" required></textarea>\r\n          <button type=\"submit\">Post</button>\r\n        </form>\r\n      </div>\r\n      <div>\r\n        <h3>Posts</h3>\r\n        <div v-for=\"post in posts\" :key=\"post.postId\" class=\"post\">\r\n          <p>{{ post.content }}</p>\r\n          <p>Posted by: {{ post.userName }}</p>\r\n          <p>Posted at: {{ post.createdAt }}</p>\r\n          <!-- 独立的 comment 输入框 -->\r\n          <form @submit.prevent=\"addComment(post.postId, post.comments, this.$route.query.userId)\">\r\n            <input type=\"text\" v-model=\"post.newComment\" placeholder=\"Add a comment\" required>\r\n            <button type=\"submit\">Comment</button>\r\n          </form>\r\n          <!-- 显示该 post 的 comments -->\r\n          <div v-for=\"comment in post.comments\" :key=\"comment.commentId\" class=\"comment\">\r\n            <p>{{ comment.content }}</p>\r\n            <p>Commented by: {{ comment.ID }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        newPostContent: '',\r\n        posts: [],\r\n        userId: null // 添加 userId 属性\r\n      };\r\n    },\r\n    created() {\r\n      this.fetchPosts();\r\n      // 从本地存储中获取 userId\r\n      this.userId = localStorage.getItem('userId');\r\n    },\r\n    methods: {\r\n      createPost() {\r\n        const newPost = {\r\n          content: this.newPostContent,\r\n          userId: this.$route.query.userId, // 将 userId 加入到新帖子的信息中\r\n          // userName: this.userName,\r\n          comments: [],\r\n          newComment: '', // 新增一个属性用于存储每个 post 的新评论内容\r\n          //yyyy-mm-dd hh:mm:ss\r\n          createdAt : new Date().toISOString().slice(0, 19).replace('T', ' ')\r\n        };\r\n        console.log(newPost);\r\n        axios.post('http://localhost:8787/api/posts', newPost)\r\n          .then(() => {\r\n            this.fetchPosts(); // 提交帖子后重新获取帖子列表\r\n            this.newPostContent = '';\r\n          })\r\n          .catch(error => {\r\n            console.error('Error creating post:', error);\r\n          });\r\n      },\r\n      addComment(postId, comments, userId) {\r\n        userId = parseInt(userId)\r\n        const post = this.posts.find(p => p.postId === postId);\r\n        if (post) {\r\n          const newComment = {\r\n            content: post.newComment,\r\n            postId: postId,\r\n            userID: userId, // 将 userId 加入到新评论的信息中\r\n          };\r\n          axios.post(`http://localhost:8787/api/posts/${postId}/comments`, newComment)\r\n            .then(response => {\r\n              comments.push(response.data);\r\n              post.newComment = ''; // 清空评论输入框\r\n            })\r\n            .catch(error => {\r\n              console.error('Error adding comment:', error);\r\n            });\r\n        }\r\n      },\r\n      fetchPosts() {\r\n        axios.get('http://localhost:8787/api/posts')\r\n          .then(response => {\r\n            this.posts = response.data.reverse(); // 反转顺序\r\n            // 为每个 post 添加一个新评论的属性\r\n            this.posts.forEach(post => {\r\n              post.newComment = '';\r\n            });\r\n          })\r\n          .catch(error => {\r\n            console.error('Error fetching posts:', error);\r\n          });\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .post {\r\n    border: 1px solid #ccc;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n  }\r\n  .comment {\r\n    margin-left: 20px;\r\n    border-top: 1px solid #eee;\r\n    padding-top: 5px;\r\n  }\r\n  </style>\r\n  "],"mappings":";;gEAEMA,mBAAA,CAA0B,YAAtB,mBAAiB;gEAEnBA,mBAAA,CAAsB,YAAlB,eAAa;gEAGfA,mBAAA,CAAmC;EAA3BC,IAAI,EAAC;AAAQ,GAAC,MAAI;gEAI5BD,mBAAA,CAAc,YAAV,OAAK;mBAXjB;mBAAA;gEAmBYA,mBAAA,CAAsC;EAA9BC,IAAI,EAAC;AAAQ,GAAC,SAAO;;uBAlBrCC,mBAAA,CA2BM,cA1BJC,UAA0B,EAC1BH,mBAAA,CAMM,cALJI,UAAsB,EACtBJ,mBAAA,CAGO;IAHAK,QAAM,EAAAC,MAAA,QAAAA,MAAA,MALrBC,cAAA,KAAAC,IAAA,KAK+BC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;sBAC/BR,mBAAA,CAA0F;IANpG,uBAAAM,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAM6BC,KAAA,CAAAC,cAAc,GAAAF,MAAA;IAAEG,WAAW,EAAC,sBAAsB;IAACC,QAAQ,EAAR;iDAAnDH,KAAA,CAAAC,cAAc,E,GACjCG,UAAmC,C,8BAGvChB,mBAAA,CAiBM,cAhBJiB,UAAc,G,kBACdf,mBAAA,CAcMgB,SAAA,QA1BdC,WAAA,CAY4BP,KAAA,CAAAQ,KAAK,EAAbC,IAAI;yBAAhBnB,mBAAA,CAcM;MAdsBoB,GAAG,EAAED,IAAI,CAACE,MAAM;MAAEC,KAAK,EAAC;QAClDxB,mBAAA,CAAyB,WAAAyB,gBAAA,CAAnBJ,IAAI,CAACK,OAAO,kBAClB1B,mBAAA,CAAqC,WAAlC,aAAW,GAAAyB,gBAAA,CAAGJ,IAAI,CAACM,QAAQ,kBAC9B3B,mBAAA,CAAsC,WAAnC,aAAW,GAAAyB,gBAAA,CAAGJ,IAAI,CAACO,SAAS,kBAC/BC,mBAAA,qBAAwB,EACxB7B,mBAAA,CAGO;MAHAK,QAAM,EAjBvBE,cAAA,CAAAI,MAAA,IAiBiCF,QAAA,CAAAqB,UAAU,CAACT,IAAI,CAACE,MAAM,EAAEF,IAAI,CAACU,QAAQ,OAAOC,MAAM,CAACC,KAAK,CAACC,MAAM;wBACpFlC,mBAAA,CAAkF;MAA3EC,IAAI,EAAC,MAAM;MAlB9B,uBAAAU,MAAA,IAkBwCU,IAAI,CAACc,UAAU,GAAAxB,MAAA;MAAEG,WAAW,EAAC,eAAe;MAACC,QAAQ,EAAR;4BAlBrFqB,UAAA,I,cAkBwCf,IAAI,CAACc,UAAU,E,GAC3CE,UAAsC,C,kCAnBlDC,UAAA,GAqBUT,mBAAA,yBAA4B,G,kBAC5B3B,mBAAA,CAGMgB,SAAA,QAzBhBC,WAAA,CAsBiCE,IAAI,CAACU,QAAQ,EAAxBQ,OAAO;2BAAnBrC,mBAAA,CAGM;QAHiCoB,GAAG,EAAEiB,OAAO,CAACC,SAAS;QAAEhB,KAAK,EAAC;UACnExB,mBAAA,CAA4B,WAAAyB,gBAAA,CAAtBc,OAAO,CAACb,OAAO,kBACrB1B,mBAAA,CAAqC,WAAlC,gBAAc,GAAAyB,gBAAA,CAAGc,OAAO,CAACE,EAAE,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}